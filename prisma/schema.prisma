// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model PropertyLocation {
  id      Int    @id @default(autoincrement())
  address String

  cityId String?
  city   City?   @relation(fields: [cityId], references: [id])

  regionId String?
  region   State?  @relation(fields: [regionId], references: [id])

  countryId String?
  country   Countries? @relation(fields: [countryId], references: [id])

  propertyTypeId String?
  propertyType   PropType? @relation(fields: [propertyTypeId], references: [id])

  listingTypeId String?
  listingType   ListingType? @relation(fields: [listingTypeId], references: [id])

  property AgentListing?

  createdAt DateTime @default(now())

  @@index([propertyTypeId])
  @@index([listingTypeId])
  @@index([cityId])
  @@index([regionId])
  @@index([countryId])
}

model AgentListing {
  id Int @id @default(autoincrement())

  propertyLocationId Int?              @unique
  propertyLocation   PropertyLocation? @relation(fields: [propertyLocationId], references: [id])

  propertySize String?
  bed          String?
  bath         String?
  description  String?

  listedBy String?

  listingStatusId String
  listingStatus   AgentListingStatus @relation(fields: [listingStatusId], references: [id])

  price String?

  imgSrc Image[] // Listing can have many images

  featureId Int?
  feature   Feature? @relation(fields: [featureId], references: [id])

  clientInterest Client[]
  lng            String?
  lat            String?
  zipCode        String?

  assignedToUserId String
  assignedToUser   User   @relation(fields: [assignedToUserId], references: [id])

  assignedToUserEmail String?
  assignedToUserName  String?
  assignedToUserPhone String?

  property Property?

  currency   String?
  datePosted DateTime @default(now())

  //@@unique([id, assignedToUserId])
  @@index([assignedToUserId])
  @@index([featureId])
  @@index([listingStatusId])
}

model ListingType {
  id       String             @id @default(cuid())
  desc     ListingStatus      @default(FOR_SALE)
  property PropertyLocation[]
}

enum ListingStatus {
  FOR_SALE
  FOR_RENT
}

// model Listing {
//   id              String   @id
//   agentListingId  String
//   listingStatusId String
//   listingTypeId   String
//   price           String
//   createdAt       DateTime
// }

model Feature {
  id          Int            @id @default(autoincrement())
  featureName String
  property    AgentListing[]
}

// model PropertyFeature {
//   agentListingId Int @id
//   featuredId  Int
// }

model Property {
  id Int @id @default(autoincrement())

  listingId Int?          @unique
  listing   AgentListing? @relation(fields: [listingId], references: [id])

  viewCount String?

  status Status @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignedToUserId String? @db.VarChar(255)
  assignedToUser   User?   @relation(fields: [assignedToUserId], references: [id])

  @@index([assignedToUserId])
}

model AgentListingStatus {
  id       String         @id @default(cuid())
  desc     Status         @default(PENDING)
  property AgentListing[]
}

enum Status {
  APPROVED
  PENDING
}

model PropertyStatus {
  id   String     @id @default(cuid())
  desc PropStatus
}

enum PropStatus {
  PENDING
  SOLD
}

model PropType {
  id       String             @id @default(cuid())
  desc     PropertyType       @default(ANY)
  property PropertyLocation[]
}

enum PropertyType {
  ANY
  HOUSE
  APPARTMENT
  LAND
  OFFICE_SPACE
}

model Image {
  id  Int    @id @default(autoincrement())
  src String

  // property   Property? @relation(fields: [propertyId], references: [id])
  // propertyId Int?

  agentListingId Int?
  agentListing   AgentListing? @relation(fields: [agentListingId], references: [id])

  @@index([agentListingId])
}

model Countries {
  id             String  @id @default(cuid())
  name           String
  capital        String
  currency       String?
  currencyName   String?
  currencySymbol String?

  state State[]

  citiess City[]

  propertyLocation PropertyLocation[]
}

model State {
  id   String @id @default(cuid())
  name String

  countryId   String
  countryName Countries @relation(fields: [countryId], references: [id])

  cities City[]

  stateCode String?

  propertyLocation PropertyLocation[]

  @@index([countryId])
}

model City {
  id   String @id @default(cuid())
  name String

  stateId String
  state   State  @relation(fields: [stateId], references: [id])

  countryId String
  country   Countries @relation(fields: [countryId], references: [id])

  countryCode String?
  stateCode   String?

  propertyLocation PropertyLocation[]

  @@index([stateId])
  @@index([countryId])
}

model Inspection {
  id               Int      @id @default(autoincrement())
  propertyId       String
  inspectionDate   DateTime
  responsibleEmpId String
}

model Client {
  id          Int    @id @default(autoincrement())
  // firstName          String
  // lastName           String
  name        String
  email       String
  phoneNumber String
  message     String

  listingId Int
  listing   AgentListing @relation(fields: [listingId], references: [id])
  // propertyInterestId Int
  // propertyInterest   ClientPropInterest @relation(fields: [propertyInterestId], references: [id])

  @@index([listingId])
}

model ClientInspection {
  clientId     Int    @id
  inspectionId String
}

model ClientPropInterest {
  id       Int    @id @default(autoincrement())
  clientId String
  //propertyId String
  //client   Client[]
}

model Offer {
  id            Int    @id
  clientId      String
  propertyId    String
  offerStatusId String
  offerAmount   String
}

model OfferStatus {
  id   Int    @id
  desc String
}

model Contract {
  id               Int      @id
  propertId        String
  listingTypeID    String
  contractDoc      String
  responsibleEmpId String
  clientId         String
  contractStatusId String
  signedDate       DateTime
  startDate        DateTime
  endDate          DateTime
}

model ContractStatus {
  id   Int    @id
  desc String
}

model Employee {
  id     Int    @id @default(autoincrement())
  userId String

  startDate DateTime
  endDate   DateTime
  jobTitle  String
}

model PropertyEmployee {
  id         Int    @id @default(autoincrement())
  propertyId String
  employeeId String
  roleTypeId String

  userId String

  startDate String
  endDate   String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// model Role {
//   id     String @id @default(cuid())
//   name   String @default("agent")
//   userId String
//   user   User   @relation(fields: [userId], references: [id])

//   @@index([userId])
// }

model User {
  id                   String         @id @default(cuid())
  firstName            String?
  lastName             String?
  name                 String?
  email                String?        @unique
  phoneNumber          String?
  emailVerified        DateTime?
  hashedPassword       String?
  image                String?
  role                 String?        @default("client")
  //role                 Role[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  accounts             Account[]
  sessions             Session[]
  assignedProperties   Property[]
  assignedAgentListing AgentListing[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
